-- ========= FIX 1: Ensure user_roles table is correctly defined and readable =========

-- Create the user_roles table if it doesn't exist. This is critical because it seems to have been created manually.
CREATE TABLE IF NOT EXISTS public.user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
    role TEXT NOT NULL,
    created_at TIMESTAMPTZ WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE (user_id, role)
);

-- Enable RLS on the table if it's not already enabled.
-- This command is idempotent, so it's safe to run even if RLS is already on.
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow authenticated users to read the roles.
-- This is necessary for the is_admin() function to work correctly.
DROP POLICY IF EXISTS "Allow authenticated users to read roles" ON public.user_roles;
CREATE POLICY "Allow authenticated users to read roles"
ON public.user_roles FOR SELECT TO authenticated USING (true);

-- ========= FIX 2: Ensure is_admin() function exists and is correct =========
-- This function is used by other RLS policies. It is defined here to ensure it exists before being used.
CREATE OR REPLACE FUNCTION public.is_admin(user_id UUID)
RETURNS boolean AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE public.user_roles.user_id = $1
    AND public.user_roles.role IN ('admin', 'super_admin')
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- ========= FIX 3: Fix RLS policy for storage.buckets =========
-- This allows the application to correctly check if a bucket already exists.
DROP POLICY IF EXISTS "Allow authenticated users to view buckets" ON storage.buckets;
CREATE POLICY "Allow authenticated users to view buckets"
ON storage.buckets FOR SELECT TO authenticated USING (true);


-- ========= FIX 4: Fix RLS policy for public.system_settings =========
-- This fixes the 406 Not Acceptable error and ensures all admins can manage settings.
DROP POLICY IF EXISTS "Admins can manage system settings" ON public.system_settings;
CREATE POLICY "Admins can manage system settings"
ON public.system_settings FOR ALL
USING (public.is_admin(auth.uid()))
WITH CHECK (public.is_admin(auth.uid()));
